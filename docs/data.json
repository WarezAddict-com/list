{"exports":[{"sort":"class","properties":[{"name":"length","documentation":"The number of elements in the list. ","type":"number","tags":{},"tagsArray":[]},{"name":"__@iterator","documentation":"","type":"() => Iterator<A>","tags":{},"tagsArray":[]}],"constructors":[{"type":"<A>(bits: number, offset: number, length: number, prefix: A[], root: Node, suffix: A[]): List<A>","parameters":[{"name":"bits","documentation":"","type":"number","tags":{"private":""},"tagsArray":[{"name":"private"}]},{"name":"offset","documentation":"","type":"number","tags":{"private":""},"tagsArray":[{"name":"private"}]},{"name":"length","documentation":"The number of elements in the list. ","type":"number","tags":{},"tagsArray":[]},{"name":"prefix","documentation":"","type":"A[]","tags":{"private":""},"tagsArray":[{"name":"private"}]},{"name":"root","documentation":"","type":"Node","tags":{"private":""},"tagsArray":[{"name":"private"}]},{"name":"suffix","documentation":"","type":"A[]","tags":{"private":""},"tagsArray":[{"name":"private"}]}],"returnType":"List<A>","documentation":"","tags":[]}],"name":"List","documentation":"Represents a list of elements.","type":"typeof List","tags":{},"tagsArray":[],"line":215,"character":0}],"categories":[{"name":"Constructors","entries":[{"sort":"function","signatures":[{"type":"<A>(...elements: A[]): List<A>","parameters":[{"name":"elements","documentation":"","type":"A[]","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Creates a list of the given elements.","tags":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Constructors"},{"name":"example","text":"list(0, 1, 2, 3); //=> list(0, 1, 2, 3)"}]}],"name":"list","documentation":"Creates a list of the given elements.","type":"<A>(...elements: A[]) => List<A>","tags":{"complexity":"O(n)","category":"Constructors","example":"list(0, 1, 2, 3); //=> list(0, 1, 2, 3)"},"tagsArray":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Constructors"},{"name":"example","text":"list(0, 1, 2, 3); //=> list(0, 1, 2, 3)"}],"line":356,"character":0},{"sort":"function","signatures":[{"type":"<A = any>(): List<A>","parameters":[],"returnType":"List<A>","documentation":"Creates an empty list.","tags":[{"name":"complexity","text":"O(1)"},{"name":"category","text":"Constructors"},{"name":"example","text":"const emptyList = empty(); //=> list()"}]}],"name":"empty","documentation":"Creates an empty list.","type":"<A = any>() => List<A>","tags":{"complexity":"O(1)","category":"Constructors","example":"const emptyList = empty(); //=> list()"},"tagsArray":[{"name":"complexity","text":"O(1)"},{"name":"category","text":"Constructors"},{"name":"example","text":"const emptyList = empty(); //=> list()"}],"line":372,"character":0},{"sort":"function","signatures":[{"type":"<A>(a: A): List<A>","parameters":[{"name":"a","documentation":"","type":"A","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Takes a single arguments and returns a singleton list that contains it.","tags":[{"name":"complexity","text":"O(1)"},{"name":"category","text":"Constructors"},{"name":"example","text":"of(\"foo\"); //=> list(\"foo\")"}]}],"name":"of","documentation":"Takes a single arguments and returns a singleton list that contains it.","type":"<A>(a: A) => List<A>","tags":{"complexity":"O(1)","category":"Constructors","example":"of(\"foo\"); //=> list(\"foo\")"},"tagsArray":[{"name":"complexity","text":"O(1)"},{"name":"category","text":"Constructors"},{"name":"example","text":"of(\"foo\"); //=> list(\"foo\")"}],"line":384,"character":0},{"sort":"function","signatures":[{"type":"<A>(first: A, second: A): List<A>","parameters":[{"name":"first","documentation":"","type":"A","tags":{},"tagsArray":[]},{"name":"second","documentation":"","type":"A","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Takes two arguments and returns a list that contains them.","tags":[{"name":"complexity","text":"O(1)"},{"name":"category","text":"Constructors"},{"name":"example","text":"pair(\"foo\", \"bar\"); //=> list(\"foo\", \"bar\")"}]}],"name":"pair","documentation":"Takes two arguments and returns a list that contains them.","type":"<A>(first: A, second: A) => List<A>","tags":{"complexity":"O(1)","category":"Constructors","example":"pair(\"foo\", \"bar\"); //=> list(\"foo\", \"bar\")"},"tagsArray":[{"name":"complexity","text":"O(1)"},{"name":"category","text":"Constructors"},{"name":"example","text":"pair(\"foo\", \"bar\"); //=> list(\"foo\", \"bar\")"}],"line":396,"character":0},{"sort":"function","signatures":[{"type":"<A>(sequence: A[] | ArrayLike<A> | Iterable<A>): List<A>","parameters":[{"name":"sequence","documentation":"","type":"A[] | ArrayLike<A> | Iterable<A>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Converts an array, an array-like, or an iterable into a list.","tags":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Constructors"},{"name":"example","text":"from([0, 1, 2, 3, 4]); //=> list(0, 1, 2, 3, 4)\nfrom(new Set([0, 1, 2, 3]); //=> list(0, 1, 2, 3)\nfrom(\"hello\"); //=> list(\"h\", \"e\", \"l\", \"l\", \"o\"));"}]}],"name":"from","documentation":"Converts an array, an array-like, or an iterable into a list.","type":"<A>(sequence: A[] | ArrayLike<A> | Iterable<A>) => List<A>","tags":{"complexity":"O(n)","category":"Constructors","example":"from([0, 1, 2, 3, 4]); //=> list(0, 1, 2, 3, 4)\nfrom(new Set([0, 1, 2, 3]); //=> list(0, 1, 2, 3)\nfrom(\"hello\"); //=> list(\"h\", \"e\", \"l\", \"l\", \"o\"));"},"tagsArray":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Constructors"},{"name":"example","text":"from([0, 1, 2, 3, 4]); //=> list(0, 1, 2, 3, 4)\nfrom(new Set([0, 1, 2, 3]); //=> list(0, 1, 2, 3)\nfrom(\"hello\"); //=> list(\"h\", \"e\", \"l\", \"l\", \"o\"));"}],"line":410,"character":0},{"sort":"function","signatures":[{"type":"(start: number, end: number): List<number>","parameters":[{"name":"start","documentation":"","type":"number","tags":{},"tagsArray":[]},{"name":"end","documentation":"","type":"number","tags":{},"tagsArray":[]}],"returnType":"List<number>","documentation":"Returns a list of numbers between an inclusive lower bound and an exclusive upper bound.","tags":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Constructors"},{"name":"example","text":"range(3, 8); //=> list(3, 4, 5, 6, 7)"}]}],"name":"range","documentation":"Returns a list of numbers between an inclusive lower bound and an exclusive upper bound.","type":"(start: number, end: number) => List<number>","tags":{"complexity":"O(n)","category":"Constructors","example":"range(3, 8); //=> list(3, 4, 5, 6, 7)"},"tagsArray":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Constructors"},{"name":"example","text":"range(3, 8); //=> list(3, 4, 5, 6, 7)"}],"line":436,"character":0},{"sort":"function","signatures":[{"type":"<A>(value: A, times: number): List<A>","parameters":[{"name":"value","documentation":"","type":"A","tags":{},"tagsArray":[]},{"name":"times","documentation":"","type":"number","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Returns a list of a given length that contains the specified value\nin all positions.","tags":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Constructors"},{"name":"example","text":"repeat(1, 7); //=> list(1, 1, 1, 1, 1, 1, 1)\nrepeat(\"foo\", 3); //=> list(\"foo\", \"foo\", \"foo\")"}]}],"name":"repeat","documentation":"Returns a list of a given length that contains the specified value\nin all positions.","type":"<A>(value: A, times: number) => List<A>","tags":{"complexity":"O(n)","category":"Constructors","example":"repeat(1, 7); //=> list(1, 1, 1, 1, 1, 1, 1)\nrepeat(\"foo\", 3); //=> list(\"foo\", \"foo\", \"foo\")"},"tagsArray":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Constructors"},{"name":"example","text":"repeat(1, 7); //=> list(1, 1, 1, 1, 1, 1, 1)\nrepeat(\"foo\", 3); //=> list(\"foo\", \"foo\", \"foo\")"}],"line":454,"character":0},{"sort":"function","signatures":[{"type":"<A>(func: (index: number) => A, times: number): List<A>","parameters":[{"name":"func","documentation":"","type":"(index: number) => A","tags":{},"tagsArray":[]},{"name":"times","documentation":"","type":"number","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Generates a new list by calling a function with the current index\n`n` times.","tags":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Constructors"},{"name":"example","text":"times(i => i, 5); //=> list(0, 1, 2, 3, 4)\ntimes(i => i * 2 + 1, 4); //=> list(1, 3, 5, 7)\ntimes(() => Math.round(Math.random() * 10), 5); //=> list(9, 1, 4, 3, 4)"}]}],"name":"times","documentation":"Generates a new list by calling a function with the current index\n`n` times.","type":"<A>(func: (index: number) => A, times: number) => List<A>","tags":{"complexity":"O(n)","category":"Constructors","example":"times(i => i, 5); //=> list(0, 1, 2, 3, 4)\ntimes(i => i * 2 + 1, 4); //=> list(1, 3, 5, 7)\ntimes(() => Math.round(Math.random() * 10), 5); //=> list(9, 1, 4, 3, 4)"},"tagsArray":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Constructors"},{"name":"example","text":"times(i => i, 5); //=> list(0, 1, 2, 3, 4)\ntimes(i => i * 2 + 1, 4); //=> list(1, 3, 5, 7)\ntimes(() => Math.round(Math.random() * 10), 5); //=> list(9, 1, 4, 3, 4)"}],"line":473,"character":0}]},{"name":"Folds","entries":[{"sort":"function","signatures":[{"type":"<A>(index: number, l: List<A>): A","parameters":[{"name":"index","documentation":"","type":"number","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"A","documentation":"Gets the nth element of the list. If `n` is out of bounds\n`undefined` is returned.","tags":[{"name":"complexity","text":"O(log(n))"},{"name":"category","text":"Folds"},{"name":"example","text":"const l = list(0, 1, 2, 3, 4);\nnth(2, l); //=> 2"}]}],"name":"nth","documentation":"Gets the nth element of the list. If `n` is out of bounds\n`undefined` is returned.","type":"<A>(index: number, l: List<A>) => A","tags":{"complexity":"O(log(n))","category":"Folds","example":"const l = list(0, 1, 2, 3, 4);\nnth(2, l); //=> 2"},"tagsArray":[{"name":"complexity","text":"O(log(n))"},{"name":"category","text":"Folds"},{"name":"example","text":"const l = list(0, 1, 2, 3, 4);\nnth(2, l); //=> 2"}],"line":537,"character":0},{"sort":"function","signatures":[{"type":"(l: List<any>): number","parameters":[{"name":"l","documentation":"","type":"List<any>","tags":{},"tagsArray":[]}],"returnType":"number","documentation":"Gets the length of a list.","tags":[{"name":"complexity","text":"`O(1)`"},{"name":"category","text":"Folds"},{"name":"example","text":"length(list(0, 1, 2, 3)); //=> 4"}]}],"name":"length","documentation":"Gets the length of a list.","type":"(l: List<any>) => number","tags":{"complexity":"`O(1)`","category":"Folds","example":"length(list(0, 1, 2, 3)); //=> 4"},"tagsArray":[{"name":"complexity","text":"`O(1)`"},{"name":"category","text":"Folds"},{"name":"example","text":"length(list(0, 1, 2, 3)); //=> 4"}],"line":892,"character":0},{"sort":"function","signatures":[{"type":"<A>(l: List<A>): A","parameters":[{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"A","documentation":"Returns the first element of the list. If the list is empty the\nfunction returns undefined.","tags":[{"name":"complexity","text":"O(1)"},{"name":"category","text":"Folds"},{"name":"example","text":"first(list(0, 1, 2, 3)); //=> 0\nfirst(list()); //=> undefined"}]}],"name":"first","documentation":"Returns the first element of the list. If the list is empty the\nfunction returns undefined.","type":"<A>(l: List<A>) => A","tags":{"complexity":"O(1)","category":"Folds","example":"first(list(0, 1, 2, 3)); //=> 0\nfirst(list()); //=> undefined"},"tagsArray":[{"name":"complexity","text":"O(1)"},{"name":"category","text":"Folds"},{"name":"example","text":"first(list(0, 1, 2, 3)); //=> 0\nfirst(list()); //=> undefined"}],"line":906,"character":0},{"sort":"function","signatures":[{"type":"<A>(l: List<A>): A","parameters":[{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"A","documentation":"Returns the last element of the list. If the list is empty the\nfunction returns `undefined`.","tags":[{"name":"complexity","text":"O(1)"},{"name":"category","text":"Folds"},{"name":"example","text":"last(list(0, 1, 2, 3)); //=> 3\nlast(list()); //=> undefined"}]}],"name":"last","documentation":"Returns the last element of the list. If the list is empty the\nfunction returns `undefined`.","type":"<A>(l: List<A>) => A","tags":{"complexity":"O(1)","category":"Folds","example":"last(list(0, 1, 2, 3)); //=> 3\nlast(list()); //=> undefined"},"tagsArray":[{"name":"complexity","text":"O(1)"},{"name":"category","text":"Folds"},{"name":"example","text":"last(list(0, 1, 2, 3)); //=> 3\nlast(list()); //=> undefined"}],"line":924,"character":0},{"sort":"function","signatures":[{"type":"<A, B>(f: (acc: B, value: A) => B, initial: B, l: List<A>): B","parameters":[{"name":"f","documentation":"","type":"(acc: B, value: A) => B","tags":{},"tagsArray":[]},{"name":"initial","documentation":"","type":"B","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"B","documentation":"Folds a function over a list. Left-associative.","tags":[{"name":"category","text":"Folds"},{"name":"example","text":"foldl((n, m) => n - m, 1, list(2, 3, 4, 5));\n//=> (((1 - 2) - 3) - 4) - 5 === -13"}]}],"name":"foldl","documentation":"Folds a function over a list. Left-associative.","type":"<A, B>(f: (acc: B, value: A) => B, initial: B, l: List<A>) => B","tags":{"category":"Folds","example":"foldl((n, m) => n - m, 1, list(2, 3, 4, 5));\n//=> (((1 - 2) - 3) - 4) - 5 === -13"},"tagsArray":[{"name":"category","text":"Folds"},{"name":"example","text":"foldl((n, m) => n - m, 1, list(2, 3, 4, 5));\n//=> (((1 - 2) - 3) - 4) - 5 === -13"}],"line":1059,"character":0},{"sort":"variable","name":"reduce","documentation":"Alias for [`foldl`](#foldl).","type":"<A, B>(f: (acc: B, value: A) => B, initial: B, l: List<A>) => B","tags":{"category":"Folds"},"tagsArray":[{"name":"category","text":"Folds"}],"line":1078,"character":13},{"sort":"function","signatures":[{"type":"<A, B>(of: Of, f: (a: A) => Applicative<B>, l: List<A>): any","parameters":[{"name":"of","documentation":"","type":"Of","tags":{},"tagsArray":[]},{"name":"f","documentation":"","type":"(a: A) => Applicative<B>","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"any","documentation":"Map each element of list to an applicative, evaluate these\napplicatives from left to right, and collect the results.\n\nThis works with Fantasy Land\n[applicatives](https://github.com/fantasyland/fantasy-land#applicative).","tags":[{"name":"category","text":"Folds"},{"name":"example","text":"const l = list(1, 3, 5, 4, 2);\nL.scan((n, m) => n + m, 0, l); //=> list(0, 1, 4, 9, 13, 15));\nL.scan((s, m) => s + m.toString(), \"\", l); //=> list(\"\", \"1\", \"13\", \"135\", \"1354\", \"13542\")"}]}],"name":"traverse","documentation":"Map each element of list to an applicative, evaluate these\napplicatives from left to right, and collect the results.\n\nThis works with Fantasy Land\n[applicatives](https://github.com/fantasyland/fantasy-land#applicative).","type":"<A, B>(of: Of, f: (a: A) => Applicative<B>, l: List<A>) => any","tags":{"category":"Folds","example":"const l = list(1, 3, 5, 4, 2);\nL.scan((n, m) => n + m, 0, l); //=> list(0, 1, 4, 9, 13, 15));\nL.scan((s, m) => s + m.toString(), \"\", l); //=> list(\"\", \"1\", \"13\", \"135\", \"1354\", \"13542\")"},"tagsArray":[{"name":"category","text":"Folds"},{"name":"example","text":"const l = list(1, 3, 5, 4, 2);\nL.scan((n, m) => n + m, 0, l); //=> list(0, 1, 4, 9, 13, 15));\nL.scan((s, m) => s + m.toString(), \"\", l); //=> list(\"\", \"1\", \"13\", \"135\", \"1354\", \"13542\")"}],"line":1102,"character":0},{"sort":"function","signatures":[{"type":"<A>(ofObj: Of, l: List<Applicative<A>>): any","parameters":[{"name":"ofObj","documentation":"","type":"Of","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<Applicative<A>>","tags":{},"tagsArray":[]}],"returnType":"any","documentation":"Evaluate each applicative in the list from left to right, and and\ncollect the results.","tags":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Folds"},{"name":"example","text":"L.sequence(Maybe, list(just(1), just(2), just(3))); //=> just(list(1, 2, 3))\nL.sequence(Maybe, list(just(1), just(2), nothing())); //=> nothing"}]}],"name":"sequence","documentation":"Evaluate each applicative in the list from left to right, and and\ncollect the results.","type":"<A>(ofObj: Of, l: List<Applicative<A>>) => any","tags":{"complexity":"O(n)","category":"Folds","example":"L.sequence(Maybe, list(just(1), just(2), just(3))); //=> just(list(1, 2, 3))\nL.sequence(Maybe, list(just(1), just(2), nothing())); //=> nothing"},"tagsArray":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Folds"},{"name":"example","text":"L.sequence(Maybe, list(just(1), just(2), just(3))); //=> just(list(1, 2, 3))\nL.sequence(Maybe, list(just(1), just(2), nothing())); //=> nothing"}],"line":1127,"character":0},{"sort":"function","signatures":[{"type":"<A>(callback: (a: A) => void, l: List<A>): void","parameters":[{"name":"callback","documentation":"","type":"(a: A) => void","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"void","documentation":"Invokes a given callback for each element in the list from left to\nright. Returns `undefined`.\n\nThis function is very similar to map. It should be used instead of\n`map` when the mapping function has side-effects. Whereas `map`\nconstructs a new list `forEach` merely returns `undefined`. This\nmakes `forEach` faster when the new list is unneeded.","tags":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Folds"},{"name":"example","text":"const l = list(0, 1, 2);\nforEach(element => console.log(element)); // Prints 0, then 1, and then 2"}]}],"name":"forEach","documentation":"Invokes a given callback for each element in the list from left to\nright. Returns `undefined`.\n\nThis function is very similar to map. It should be used instead of\n`map` when the mapping function has side-effects. Whereas `map`\nconstructs a new list `forEach` merely returns `undefined`. This\nmakes `forEach` faster when the new list is unneeded.","type":"<A>(callback: (a: A) => void, l: List<A>) => void","tags":{"complexity":"O(n)","category":"Folds","example":"const l = list(0, 1, 2);\nforEach(element => console.log(element)); // Prints 0, then 1, and then 2"},"tagsArray":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Folds"},{"name":"example","text":"const l = list(0, 1, 2);\nforEach(element => console.log(element)); // Prints 0, then 1, and then 2"}],"line":1168,"character":0},{"sort":"function","signatures":[{"type":"(separator: string, l: List<string>): string","parameters":[{"name":"separator","documentation":"","type":"string","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<string>","tags":{},"tagsArray":[]}],"returnType":"string","documentation":"Concats the strings in the list separated by a specified separator.","tags":[{"name":"category","text":"Folds"},{"name":"example","text":"join(\", \", list(\"one\", \"two\", \"three\")); //=> \"one, two, three\""}]}],"name":"join","documentation":"Concats the strings in the list separated by a specified separator.","type":"(separator: string, l: List<string>) => string","tags":{"category":"Folds","example":"join(\", \", list(\"one\", \"two\", \"three\")); //=> \"one, two, three\""},"tagsArray":[{"name":"category","text":"Folds"},{"name":"example","text":"join(\", \", list(\"one\", \"two\", \"three\")); //=> \"one, two, three\""}],"line":1250,"character":0},{"sort":"function","signatures":[{"type":"<A, B>(f: (value: A, acc: B) => B, initial: B, l: List<A>): B","parameters":[{"name":"f","documentation":"","type":"(value: A, acc: B) => B","tags":{},"tagsArray":[]},{"name":"initial","documentation":"","type":"B","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"B","documentation":"Folds a function over a list. Right-associative.","tags":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Folds"},{"name":"example","text":"foldr((n, m) => n - m, 5, list(1, 2, 3, 4));\n1 - (2 - (3 - (4 - 5))); //=> 3"}]}],"name":"foldr","documentation":"Folds a function over a list. Right-associative.","type":"<A, B>(f: (value: A, acc: B) => B, initial: B, l: List<A>) => B","tags":{"complexity":"O(n)","category":"Folds","example":"foldr((n, m) => n - m, 5, list(1, 2, 3, 4));\n1 - (2 - (3 - (4 - 5))); //=> 3"},"tagsArray":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Folds"},{"name":"example","text":"foldr((n, m) => n - m, 5, list(1, 2, 3, 4));\n1 - (2 - (3 - (4 - 5))); //=> 3"}],"line":1305,"character":0},{"sort":"variable","name":"reduceRight","documentation":"Alias for [`foldr`](#foldr).","type":"<A, B>(f: (value: A, acc: B) => B, initial: B, l: List<A>) => B","tags":{"category":"Folds"},"tagsArray":[{"name":"category","text":"Folds"}],"line":1324,"character":13},{"sort":"function","signatures":[{"type":"<A>(predicate: (a: A) => boolean, l: List<A>): boolean","parameters":[{"name":"predicate","documentation":"","type":"(a: A) => boolean","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"boolean","documentation":"Returns `true` if and only if the predicate function returns `true`\nfor all elements in the given list.","tags":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Folds"},{"name":"example","text":"every(isEven, empty()); //=> true\nevery(isEven, list(2, 4, 6, 8)); //=> true\nevery(isEven, list(2, 3, 4, 6, 7, 8)); //=> false\nevery(isEven, list(1, 3, 5, 7)); //=> false"}]}],"name":"every","documentation":"Returns `true` if and only if the predicate function returns `true`\nfor all elements in the given list.","type":"<A>(predicate: (a: A) => boolean, l: List<A>) => boolean","tags":{"complexity":"O(n)","category":"Folds","example":"every(isEven, empty()); //=> true\nevery(isEven, list(2, 4, 6, 8)); //=> true\nevery(isEven, list(2, 3, 4, 6, 7, 8)); //=> false\nevery(isEven, list(1, 3, 5, 7)); //=> false"},"tagsArray":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Folds"},{"name":"example","text":"every(isEven, empty()); //=> true\nevery(isEven, list(2, 4, 6, 8)); //=> true\nevery(isEven, list(2, 3, 4, 6, 7, 8)); //=> false\nevery(isEven, list(1, 3, 5, 7)); //=> false"}],"line":1490,"character":0},{"sort":"variable","name":"all","documentation":"Alias for [`every`](#every).","type":"<A>(predicate: (a: A) => boolean, l: List<A>) => boolean","tags":{"category":"Folds"},"tagsArray":[{"name":"category","text":"Folds"}],"line":1499,"character":13},{"sort":"function","signatures":[{"type":"<A>(predicate: (a: A) => boolean, l: List<A>): boolean","parameters":[{"name":"predicate","documentation":"","type":"(a: A) => boolean","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"boolean","documentation":"Returns true if and only if there exists an element in the list for\nwhich the predicate returns true.","tags":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Folds"},{"name":"example","text":"const isEven = n => n % 2 === 0;\nsome(isEven, empty()); //=> false\nsome(isEven, list(2, 4, 6, 8)); //=> true\nsome(isEven, list(2, 3, 4, 6, 7, 8)); //=> true\nsome(isEven, list(1, 3, 5, 7)); //=> false"}]}],"name":"some","documentation":"Returns true if and only if there exists an element in the list for\nwhich the predicate returns true.","type":"<A>(predicate: (a: A) => boolean, l: List<A>) => boolean","tags":{"complexity":"O(n)","category":"Folds","example":"const isEven = n => n % 2 === 0;\nsome(isEven, empty()); //=> false\nsome(isEven, list(2, 4, 6, 8)); //=> true\nsome(isEven, list(2, 3, 4, 6, 7, 8)); //=> true\nsome(isEven, list(1, 3, 5, 7)); //=> false"},"tagsArray":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Folds"},{"name":"example","text":"const isEven = n => n % 2 === 0;\nsome(isEven, empty()); //=> false\nsome(isEven, list(2, 4, 6, 8)); //=> true\nsome(isEven, list(2, 3, 4, 6, 7, 8)); //=> true\nsome(isEven, list(1, 3, 5, 7)); //=> false"}],"line":1518,"character":0},{"sort":"variable","name":"any","documentation":"Alias for [`some`](#some).","type":"<A>(predicate: (a: A) => boolean, l: List<A>) => boolean","tags":{"category":"Folds"},"tagsArray":[{"name":"category","text":"Folds"}],"line":1528,"character":13},{"sort":"function","signatures":[{"type":"<A>(predicate: (a: A) => boolean, l: List<A>): boolean","parameters":[{"name":"predicate","documentation":"","type":"(a: A) => boolean","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"boolean","documentation":"Returns `true` if and only if the predicate function returns\n`false` for every element in the given list.","tags":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Folds"},{"name":"example","text":"none(isEven, empty()); //=> true\nnone(isEven, list(2, 4, 6, 8)); //=> false\nnone(isEven, list(2, 3, 4, 6, 7, 8)); //=> false\nnone(isEven, list(1, 3, 5, 7)); //=> true"}]}],"name":"none","documentation":"Returns `true` if and only if the predicate function returns\n`false` for every element in the given list.","type":"<A>(predicate: (a: A) => boolean, l: List<A>) => boolean","tags":{"complexity":"O(n)","category":"Folds","example":"none(isEven, empty()); //=> true\nnone(isEven, list(2, 4, 6, 8)); //=> false\nnone(isEven, list(2, 3, 4, 6, 7, 8)); //=> false\nnone(isEven, list(1, 3, 5, 7)); //=> true"},"tagsArray":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Folds"},{"name":"example","text":"none(isEven, empty()); //=> true\nnone(isEven, list(2, 4, 6, 8)); //=> false\nnone(isEven, list(2, 3, 4, 6, 7, 8)); //=> false\nnone(isEven, list(1, 3, 5, 7)); //=> true"}],"line":1542,"character":0},{"sort":"function","signatures":[{"type":"<A>(predicate: (a: A) => boolean, l: List<A>): A","parameters":[{"name":"predicate","documentation":"","type":"(a: A) => boolean","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"A","documentation":"Returns the _first_ element for which the predicate returns `true`.\nIf no such element is found the function returns `undefined`.","tags":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Folds"},{"name":"example","text":"find(isEven, list(1, 3, 5, 6, 7, 8, 9)); //=> 6\nfind(isEven, list(1, 3, 5, 7, 9)); //=> undefined"}]}],"name":"find","documentation":"Returns the _first_ element for which the predicate returns `true`.\nIf no such element is found the function returns `undefined`.","type":"<A>(predicate: (a: A) => boolean, l: List<A>) => A","tags":{"complexity":"O(n)","category":"Folds","example":"find(isEven, list(1, 3, 5, 6, 7, 8, 9)); //=> 6\nfind(isEven, list(1, 3, 5, 7, 9)); //=> undefined"},"tagsArray":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Folds"},{"name":"example","text":"find(isEven, list(1, 3, 5, 6, 7, 8, 9)); //=> 6\nfind(isEven, list(1, 3, 5, 7, 9)); //=> undefined"}],"line":1565,"character":0},{"sort":"function","signatures":[{"type":"<A>(predicate: (a: A) => boolean, l: List<A>): A","parameters":[{"name":"predicate","documentation":"","type":"(a: A) => boolean","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"A","documentation":"Returns the _last_ element for which the predicate returns `true`.\nIf no such element is found the function returns `undefined`.","tags":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Folds"},{"name":"example","text":"find(isEven, list(1, 3, 5, 6, 7, 8, 9)); //=> 8\nfind(isEven, list(1, 3, 5, 7, 9)); //=> undefined"}]}],"name":"findLast","documentation":"Returns the _last_ element for which the predicate returns `true`.\nIf no such element is found the function returns `undefined`.","type":"<A>(predicate: (a: A) => boolean, l: List<A>) => A","tags":{"complexity":"O(n)","category":"Folds","example":"find(isEven, list(1, 3, 5, 6, 7, 8, 9)); //=> 8\nfind(isEven, list(1, 3, 5, 7, 9)); //=> undefined"},"tagsArray":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Folds"},{"name":"example","text":"find(isEven, list(1, 3, 5, 6, 7, 8, 9)); //=> 8\nfind(isEven, list(1, 3, 5, 7, 9)); //=> undefined"}],"line":1583,"character":0},{"sort":"function","signatures":[{"type":"<A>(element: A, l: List<A>): number","parameters":[{"name":"element","documentation":"","type":"A","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"number","documentation":"Returns the index of the _first_ element in the list that is equal\nto the given element. If no such element is found `-1` is returned.","tags":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Folds"},{"name":"example","text":"const l = list(12, 4, 2, 89, 6, 18, 7);\nindexOf(12, l); //=> 0\nindexOf(89, l); //=> 3\nindexOf(10, l); //=> -1"}]}],"name":"indexOf","documentation":"Returns the index of the _first_ element in the list that is equal\nto the given element. If no such element is found `-1` is returned.","type":"<A>(element: A, l: List<A>) => number","tags":{"complexity":"O(n)","category":"Folds","example":"const l = list(12, 4, 2, 89, 6, 18, 7);\nindexOf(12, l); //=> 0\nindexOf(89, l); //=> 3\nindexOf(10, l); //=> -1"},"tagsArray":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Folds"},{"name":"example","text":"const l = list(12, 4, 2, 89, 6, 18, 7);\nindexOf(12, l); //=> 0\nindexOf(89, l); //=> 3\nindexOf(10, l); //=> -1"}],"line":1614,"character":0},{"sort":"function","signatures":[{"type":"<A>(element: A, l: List<A>): number","parameters":[{"name":"element","documentation":"","type":"A","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"number","documentation":"Returns the index of the _last_ element in the list that is equal\nto the given element. If no such element is found `-1` is returned.","tags":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Folds"},{"name":"example","text":"const l = L.list(12, 4, 2, 18, 89, 2, 18, 7);\nL.lastIndexOf(18, l); //=> 6\nL.lastIndexOf(2, l); //=> 5\nL.lastIndexOf(12, l); //=> 0"}]}],"name":"lastIndexOf","documentation":"Returns the index of the _last_ element in the list that is equal\nto the given element. If no such element is found `-1` is returned.","type":"<A>(element: A, l: List<A>) => number","tags":{"complexity":"O(n)","category":"Folds","example":"const l = L.list(12, 4, 2, 18, 89, 2, 18, 7);\nL.lastIndexOf(18, l); //=> 6\nL.lastIndexOf(2, l); //=> 5\nL.lastIndexOf(12, l); //=> 0"},"tagsArray":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Folds"},{"name":"example","text":"const l = L.list(12, 4, 2, 18, 89, 2, 18, 7);\nL.lastIndexOf(18, l); //=> 6\nL.lastIndexOf(2, l); //=> 5\nL.lastIndexOf(12, l); //=> 0"}],"line":1632,"character":0},{"sort":"function","signatures":[{"type":"<A>(predicate: (a: A) => boolean, l: List<A>): number","parameters":[{"name":"predicate","documentation":"","type":"(a: A) => boolean","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"number","documentation":"Returns the index of the `first` element for which the predicate\nreturns true. If no such element is found the function returns\n`-1`.","tags":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Folds"},{"name":"example","text":"findIndex(isEven, list(1, 3, 5, 6, 7, 9, 10)); //=> 3\nfindIndex(isEven, list(1, 3, 5, 7, 9)); //=> -1"}]}],"name":"findIndex","documentation":"Returns the index of the `first` element for which the predicate\nreturns true. If no such element is found the function returns\n`-1`.","type":"<A>(predicate: (a: A) => boolean, l: List<A>) => number","tags":{"complexity":"O(n)","category":"Folds","example":"findIndex(isEven, list(1, 3, 5, 6, 7, 9, 10)); //=> 3\nfindIndex(isEven, list(1, 3, 5, 7, 9)); //=> -1"},"tagsArray":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Folds"},{"name":"example","text":"findIndex(isEven, list(1, 3, 5, 6, 7, 9, 10)); //=> 3\nfindIndex(isEven, list(1, 3, 5, 7, 9)); //=> -1"}],"line":1660,"character":0},{"sort":"function","signatures":[{"type":"<A>(element: A, l: List<A>): boolean","parameters":[{"name":"element","documentation":"","type":"A","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"boolean","documentation":"Returns `true` if the list contains the specified element.\nOtherwise it returns `false`.","tags":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Folds"},{"name":"example","text":"includes(3, list(0, 1, 2, 3, 4, 5)); //=> true\nincludes(3, list(0, 1, 2, 4, 5)); //=> false"}]}],"name":"includes","documentation":"Returns `true` if the list contains the specified element.\nOtherwise it returns `false`.","type":"<A>(element: A, l: List<A>) => boolean","tags":{"complexity":"O(n)","category":"Folds","example":"includes(3, list(0, 1, 2, 3, 4, 5)); //=> true\nincludes(3, list(0, 1, 2, 4, 5)); //=> false"},"tagsArray":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Folds"},{"name":"example","text":"includes(3, list(0, 1, 2, 3, 4, 5)); //=> true\nincludes(3, list(0, 1, 2, 4, 5)); //=> false"}],"line":1693,"character":0},{"sort":"variable","name":"contains","documentation":"Alias for [`includes`](#includes).","type":"<A>(element: A, l: List<A>) => boolean","tags":{"category":"Folds"},"tagsArray":[{"name":"category","text":"Folds"}],"line":1704,"character":13},{"sort":"function","signatures":[{"type":"<A>(l1: List<A>, l2: List<A>): boolean","parameters":[{"name":"l1","documentation":"","type":"List<A>","tags":{},"tagsArray":[]},{"name":"l2","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"boolean","documentation":"Returns true if the two lists are equivalent.","tags":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Folds"},{"name":"example","text":"equals(list(0, 1, 2, 3), list(0, 1, 2, 3)); //=> true\nequals(list(\"a\", \"b\", \"c\"), list(\"a\", \"z\", \"c\")); //=> false"}]}],"name":"equals","documentation":"Returns true if the two lists are equivalent.","type":"<A>(l1: List<A>, l2: List<A>) => boolean","tags":{"complexity":"O(n)","category":"Folds","example":"equals(list(0, 1, 2, 3), list(0, 1, 2, 3)); //=> true\nequals(list(\"a\", \"b\", \"c\"), list(\"a\", \"z\", \"c\")); //=> false"},"tagsArray":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Folds"},{"name":"example","text":"equals(list(0, 1, 2, 3), list(0, 1, 2, 3)); //=> true\nequals(list(\"a\", \"b\", \"c\"), list(\"a\", \"z\", \"c\")); //=> false"}],"line":1726,"character":0},{"sort":"function","signatures":[{"type":"<A>(f: (a: A, b: A) => boolean, l1: List<A>, l2: List<A>): boolean","parameters":[{"name":"f","documentation":"","type":"(a: A, b: A) => boolean","tags":{},"tagsArray":[]},{"name":"l1","documentation":"","type":"List<A>","tags":{},"tagsArray":[]},{"name":"l2","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"boolean","documentation":"Returns true if the two lists are equivalent when comparing each\npair of elements with the given comparison function.","tags":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Folds"},{"name":"example","text":"equalsWith(\n(n, m) => n.length === m.length,\nlist(\"foo\", \"hello\", \"one\"),\nlist(\"bar\", \"world\", \"two\")\n); //=> true"}]}],"name":"equalsWith","documentation":"Returns true if the two lists are equivalent when comparing each\npair of elements with the given comparison function.","type":"<A>(f: (a: A, b: A) => boolean, l1: List<A>, l2: List<A>) => boolean","tags":{"complexity":"O(n)","category":"Folds","example":"equalsWith(\n(n, m) => n.length === m.length,\nlist(\"foo\", \"hello\", \"one\"),\nlist(\"bar\", \"world\", \"two\")\n); //=> true"},"tagsArray":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Folds"},{"name":"example","text":"equalsWith(\n(n, m) => n.length === m.length,\nlist(\"foo\", \"hello\", \"one\"),\nlist(\"bar\", \"world\", \"two\")\n); //=> true"}],"line":1743,"character":0},{"sort":"function","signatures":[{"type":"<A>(l: List<A>): A[]","parameters":[{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"A[]","documentation":"Converts a list into an array.","tags":[{"name":"complexity","text":"`O(n)`"},{"name":"category","text":"Folds"},{"name":"example","text":"toArray(list(0, 1, 2, 3, 4)); //=> [0, 1, 2, 3, 4]"}]}],"name":"toArray","documentation":"Converts a list into an array.","type":"<A>(l: List<A>) => A[]","tags":{"complexity":"`O(n)`","category":"Folds","example":"toArray(list(0, 1, 2, 3, 4)); //=> [0, 1, 2, 3, 4]"},"tagsArray":[{"name":"complexity","text":"`O(n)`"},{"name":"category","text":"Folds"},{"name":"example","text":"toArray(list(0, 1, 2, 3, 4)); //=> [0, 1, 2, 3, 4]"}],"line":2869,"character":0},{"sort":"function","signatures":[{"type":"<A>(l: any): l is List<A>","parameters":[{"name":"l","documentation":"","type":"any","tags":{},"tagsArray":[]}],"returnType":"boolean","documentation":"Returns `true` if the given argument is a list and `false`\notherwise.","tags":[{"name":"complexity","text":"O(1)"},{"name":"category","text":"Folds"},{"name":"example","text":"isList(list(0, 1, 2)); //=> true\nisList([0, 1, 2]); //=> false\nisList(\"string\"); //=> false\nisList({ foo: 0, bar: 1 }); //=> false"}]}],"name":"isList","documentation":"Returns `true` if the given argument is a list and `false`\notherwise.","type":"<A>(l: any) => l is List<A>","tags":{"complexity":"O(1)","category":"Folds","example":"isList(list(0, 1, 2)); //=> true\nisList([0, 1, 2]); //=> false\nisList(\"string\"); //=> false\nisList({ foo: 0, bar: 1 }); //=> false"},"tagsArray":[{"name":"complexity","text":"O(1)"},{"name":"category","text":"Folds"},{"name":"example","text":"isList(list(0, 1, 2)); //=> true\nisList([0, 1, 2]); //=> false\nisList(\"string\"); //=> false\nisList({ foo: 0, bar: 1 }); //=> false"}],"line":2927,"character":0},{"sort":"function","signatures":[{"type":"(l: List<any>): boolean","parameters":[{"name":"l","documentation":"","type":"List<any>","tags":{},"tagsArray":[]}],"returnType":"boolean","documentation":"Returns `true` if the given list is empty and `false` otherwise.","tags":[{"name":"category","text":"Folds"},{"name":"example","text":"isEmpty(list()); //=> true\nisEmpty(list(0, 1, 2)); //=> false"}]}],"name":"isEmpty","documentation":"Returns `true` if the given list is empty and `false` otherwise.","type":"(l: List<any>) => boolean","tags":{"category":"Folds","example":"isEmpty(list()); //=> true\nisEmpty(list(0, 1, 2)); //=> false"},"tagsArray":[{"name":"category","text":"Folds"},{"name":"example","text":"isEmpty(list()); //=> true\nisEmpty(list(0, 1, 2)); //=> false"}],"line":3182,"character":0}]},{"name":"Transformers","entries":[{"sort":"function","signatures":[{"type":"<A>(value: A, l: List<A>): List<A>","parameters":[{"name":"value","documentation":"","type":"A","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Prepends an element to the front of a list and returns the new list.","tags":[{"name":"complexity","text":"O(1)"},{"name":"category","text":"Transformers"},{"name":"example","text":"prepend(0, list(1, 2, 3)); //=> list(0, 1, 2, 3)\nprepend(\"h\", list(\"e\", \"l\", \"l\", \"o\")); //=> list(\"h\", \"e\", \"l\", \"l\", \"o\")"}]}],"name":"prepend","documentation":"Prepends an element to the front of a list and returns the new list.","type":"<A>(value: A, l: List<A>) => List<A>","tags":{"complexity":"O(1)","category":"Transformers","example":"prepend(0, list(1, 2, 3)); //=> list(0, 1, 2, 3)\nprepend(\"h\", list(\"e\", \"l\", \"l\", \"o\")); //=> list(\"h\", \"e\", \"l\", \"l\", \"o\")"},"tagsArray":[{"name":"complexity","text":"O(1)"},{"name":"category","text":"Transformers"},{"name":"example","text":"prepend(0, list(1, 2, 3)); //=> list(0, 1, 2, 3)\nprepend(\"h\", list(\"e\", \"l\", \"l\", \"o\")); //=> list(\"h\", \"e\", \"l\", \"l\", \"o\")"}],"line":612,"character":0},{"sort":"function","signatures":[{"type":"<A>(value: A, l: List<A>): List<A>","parameters":[{"name":"value","documentation":"","type":"A","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Appends an element to the end of a list and returns the new list.","tags":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Transformers"},{"name":"example","text":"append(3, list(0, 1, 2)); //=> list(0, 1, 2, 3)"}]}],"name":"append","documentation":"Appends an element to the end of a list and returns the new list.","type":"<A>(value: A, l: List<A>) => List<A>","tags":{"complexity":"O(n)","category":"Transformers","example":"append(3, list(0, 1, 2)); //=> list(0, 1, 2, 3)"},"tagsArray":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Transformers"},{"name":"example","text":"append(3, list(0, 1, 2)); //=> list(0, 1, 2, 3)"}],"line":848,"character":0},{"sort":"function","signatures":[{"type":"<A, B>(f: (a: A) => B, l: List<A>): List<B>","parameters":[{"name":"f","documentation":"","type":"(a: A) => B","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<B>","documentation":"Applies a function to each element in the given list and returns a\nnew list of the values that the function return.","tags":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Transformers"},{"name":"example","text":"map(n => n * n, list(0, 1, 2, 3, 4)); //=> list(0, 1, 4, 9, 16)"}]}],"name":"map","documentation":"Applies a function to each element in the given list and returns a\nnew list of the values that the function return.","type":"<A, B>(f: (a: A) => B, l: List<A>) => List<B>","tags":{"complexity":"O(n)","category":"Transformers","example":"map(n => n * n, list(0, 1, 2, 3, 4)); //=> list(0, 1, 4, 9, 16)"},"tagsArray":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Transformers"},{"name":"example","text":"map(n => n * n, list(0, 1, 2, 3, 4)); //=> list(0, 1, 4, 9, 16)"}],"line":980,"character":0},{"sort":"function","signatures":[{"type":"<A, K extends keyof A>(key: K, l: List<A>): List<A[K]>","parameters":[{"name":"key","documentation":"","type":"K","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<A[K]>","documentation":"Extracts the specified property from each object in the list.","tags":[{"name":"category","text":"Transformers"},{"name":"example","text":"const l = list(\n   { foo: 0, bar: \"a\" },\n   { foo: 1, bar: \"b\" },\n   { foo: 2, bar: \"c\" }\n);\npluck(\"foo\", l); //=> list(0, 1, 2)\npluck(\"bar\", l); //=> list(\"a\", \"b\", \"c\")"}]}],"name":"pluck","documentation":"Extracts the specified property from each object in the list.","type":"<A, K extends keyof A>(key: K, l: List<A>) => List<A[K]>","tags":{"category":"Transformers","example":"const l = list(\n   { foo: 0, bar: \"a\" },\n   { foo: 1, bar: \"b\" },\n   { foo: 2, bar: \"c\" }\n);\npluck(\"foo\", l); //=> list(0, 1, 2)\npluck(\"bar\", l); //=> list(\"a\", \"b\", \"c\")"},"tagsArray":[{"name":"category","text":"Transformers"},{"name":"example","text":"const l = list(\n   { foo: 0, bar: \"a\" },\n   { foo: 1, bar: \"b\" },\n   { foo: 2, bar: \"c\" }\n);\npluck(\"foo\", l); //=> list(0, 1, 2)\npluck(\"bar\", l); //=> list(\"a\", \"b\", \"c\")"}],"line":1005,"character":0},{"sort":"function","signatures":[{"type":"<A, B>(f: (acc: B, value: A) => B, initial: B, l: List<A>): List<B>","parameters":[{"name":"f","documentation":"","type":"(acc: B, value: A) => B","tags":{},"tagsArray":[]},{"name":"initial","documentation":"","type":"B","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<B>","documentation":"Folds a function over a list from left to right while collecting\nall the intermediate steps in a resulting list.","tags":[{"name":"category","text":"Transformers"},{"name":"example","text":"const l = list(1, 3, 5, 4, 2);\nL.scan((n, m) => n + m, 0, l); //=> list(0, 1, 4, 9, 13, 15));\nL.scan((s, m) => s + m.toString(), \"\", l); //=> list(\"\", \"1\", \"13\", \"135\", \"1354\", \"13542\")"}]}],"name":"scan","documentation":"Folds a function over a list from left to right while collecting\nall the intermediate steps in a resulting list.","type":"<A, B>(f: (acc: B, value: A) => B, initial: B, l: List<A>) => List<B>","tags":{"category":"Transformers","example":"const l = list(1, 3, 5, 4, 2);\nL.scan((n, m) => n + m, 0, l); //=> list(0, 1, 4, 9, 13, 15));\nL.scan((s, m) => s + m.toString(), \"\", l); //=> list(\"\", \"1\", \"13\", \"135\", \"1354\", \"13542\")"},"tagsArray":[{"name":"category","text":"Transformers"},{"name":"example","text":"const l = list(1, 3, 5, 4, 2);\nL.scan((n, m) => n + m, 0, l); //=> list(0, 1, 4, 9, 13, 15));\nL.scan((s, m) => s + m.toString(), \"\", l); //=> list(\"\", \"1\", \"13\", \"135\", \"1354\", \"13542\")"}],"line":1141,"character":0},{"sort":"function","signatures":[{"type":"<A, B extends A>(predicate: (a: A) => a is B, l: List<A>): List<B>","parameters":[{"name":"predicate","documentation":"","type":"(a: A) => a is B","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<B>","documentation":"Returns a new list that only contains the elements of the original\nlist for which the predicate returns `true`.","tags":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Transformers"},{"name":"example","text":"filter(isEven, list(0, 1, 2, 3, 4, 5, 6)); //=> list(0, 2, 4, 6)"}]},{"type":"<A>(predicate: (a: A) => boolean, l: List<A>): List<A>","parameters":[{"name":"predicate","documentation":"","type":"(a: A) => boolean","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"","tags":[]}],"name":"filter","documentation":"Returns a new list that only contains the elements of the original\nlist for which the predicate returns `true`.","type":"{ <A, B extends A>(predicate: (a: A) => a is B, l: List<A>): List<B>; <A>(predicate: (a: A) => boolean, l: List<A>): List<A>; }","tags":{"complexity":"O(n)","category":"Transformers","example":"filter(isEven, list(0, 1, 2, 3, 4, 5, 6)); //=> list(0, 2, 4, 6)"},"tagsArray":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Transformers"},{"name":"example","text":"filter(isEven, list(0, 1, 2, 3, 4, 5, 6)); //=> list(0, 2, 4, 6)"}],"line":1181,"character":0},{"sort":"function","signatures":[{"type":"<A>(predicate: (a: A) => boolean, l: List<A>): List<A>","parameters":[{"name":"predicate","documentation":"","type":"(a: A) => boolean","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Returns a new list that only contains the elements of the original\nlist for which the predicate returns `false`.","tags":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Transformers"},{"name":"example","text":"reject(isEven, list(0, 1, 2, 3, 4, 5, 6)); //=> list(1, 3, 5)"}]}],"name":"reject","documentation":"Returns a new list that only contains the elements of the original\nlist for which the predicate returns `false`.","type":"<A>(predicate: (a: A) => boolean, l: List<A>) => List<A>","tags":{"complexity":"O(n)","category":"Transformers","example":"reject(isEven, list(0, 1, 2, 3, 4, 5, 6)); //=> list(1, 3, 5)"},"tagsArray":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Transformers"},{"name":"example","text":"reject(isEven, list(0, 1, 2, 3, 4, 5, 6)); //=> list(1, 3, 5)"}],"line":1203,"character":0},{"sort":"function","signatures":[{"type":"<A, B extends A>(predicate: (a: A) => a is B, l: List<A>): [List<B>, List<Exclude<A, B>>]","parameters":[{"name":"predicate","documentation":"","type":"(a: A) => a is B","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"[List<B>, List<Exclude<A, B>>]","documentation":"Splits the list into two lists. One list that contains all the\nvalues for which the predicate returns `true` and one containing\nthe values for which it returns `false`.","tags":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Transformers"},{"name":"example","text":"partition(isEven, list(0, 1, 2, 3, 4, 5)); //=> [(list(0, 2, 4), list(1, 3, 5)]"}]},{"type":"<A>(predicate: (a: A) => boolean, l: List<A>): [List<A>, List<A>]","parameters":[{"name":"predicate","documentation":"","type":"(a: A) => boolean","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"[List<A>, List<A>]","documentation":"","tags":[]}],"name":"partition","documentation":"Splits the list into two lists. One list that contains all the\nvalues for which the predicate returns `true` and one containing\nthe values for which it returns `false`.","type":"{ <A, B extends A>(predicate: (a: A) => a is B, l: List<A>): [List<B>, List<Exclude<A, B>>]; <A>(predicate: (a: A) => boolean, l: List<A>): [List<A>, List<A>]; }","tags":{"complexity":"O(n)","category":"Transformers","example":"partition(isEven, list(0, 1, 2, 3, 4, 5)); //=> [(list(0, 2, 4), list(1, 3, 5)]"},"tagsArray":[{"name":"complexity","text":"O(n)"},{"name":"category","text":"Transformers"},{"name":"example","text":"partition(isEven, list(0, 1, 2, 3, 4, 5)); //=> [(list(0, 2, 4), list(1, 3, 5)]"}],"line":1221,"character":0},{"sort":"function","signatures":[{"type":"<A, B>(listF: List<(a: A) => B>, l: List<A>): List<B>","parameters":[{"name":"listF","documentation":"","type":"List<(a: A) => B>","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<B>","documentation":"Applies a list of functions to a list of values.","tags":[{"name":"category","text":"Transformers"},{"name":"example","text":"ap(list((n: number) => n + 2, n => 2 * n, n => n * n), list(1, 2, 3));\n//=> list(3, 4, 5, 2, 4, 6, 1, 4, 9)"}]}],"name":"ap","documentation":"Applies a list of functions to a list of values.","type":"<A, B>(listF: List<(a: A) => B>, l: List<A>) => List<B>","tags":{"category":"Transformers","example":"ap(list((n: number) => n + 2, n => 2 * n, n => n * n), list(1, 2, 3));\n//=> list(3, 4, 5, 2, 4, 6, 1, 4, 9)"},"tagsArray":[{"name":"category","text":"Transformers"},{"name":"example","text":"ap(list((n: number) => n + 2, n => 2 * n, n => n * n), list(1, 2, 3));\n//=> list(3, 4, 5, 2, 4, 6, 1, 4, 9)"}],"line":1334,"character":0},{"sort":"function","signatures":[{"type":"<A>(nested: List<List<A>>): List<A>","parameters":[{"name":"nested","documentation":"","type":"List<List<A>>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Flattens a list of lists into a list. Note that this function does\nnot flatten recursively. It removes one level of nesting only.","tags":[{"name":"complexity","text":"O(n * log(m)), where n is the length of the outer list and m the length of the inner lists."},{"name":"category","text":"Transformers"},{"name":"example","text":"const nested = list(list(0, 1, 2, 3), list(4), empty(), list(5, 6));\nflatten(nested); //=> list(0, 1, 2, 3, 4, 5, 6)"}]}],"name":"flatten","documentation":"Flattens a list of lists into a list. Note that this function does\nnot flatten recursively. It removes one level of nesting only.","type":"<A>(nested: List<List<A>>) => List<A>","tags":{"complexity":"O(n * log(m)), where n is the length of the outer list and m the length of the inner lists.","category":"Transformers","example":"const nested = list(list(0, 1, 2, 3), list(4), empty(), list(5, 6));\nflatten(nested); //=> list(0, 1, 2, 3, 4, 5, 6)"},"tagsArray":[{"name":"complexity","text":"O(n * log(m)), where n is the length of the outer list and m the length of the inner lists."},{"name":"category","text":"Transformers"},{"name":"example","text":"const nested = list(list(0, 1, 2, 3), list(4), empty(), list(5, 6));\nflatten(nested); //=> list(0, 1, 2, 3, 4, 5, 6)"}],"line":1348,"character":0},{"sort":"function","signatures":[{"type":"<A, B>(f: (a: A) => List<B>, l: List<A>): List<B>","parameters":[{"name":"f","documentation":"","type":"(a: A) => List<B>","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<B>","documentation":"Maps a function over a list and concatenates all the resulting\nlists together.","tags":[{"name":"category","text":"Transformers"},{"name":"example","text":"flatMap(n => list(n, 2 * n, n * n), list(1, 2, 3)); //=> list(1, 2, 1, 2, 4, 4, 3, 6, 9)"}]}],"name":"flatMap","documentation":"Maps a function over a list and concatenates all the resulting\nlists together.","type":"<A, B>(f: (a: A) => List<B>, l: List<A>) => List<B>","tags":{"category":"Transformers","example":"flatMap(n => list(n, 2 * n, n * n), list(1, 2, 3)); //=> list(1, 2, 1, 2, 4, 4, 3, 6, 9)"},"tagsArray":[{"name":"category","text":"Transformers"},{"name":"example","text":"flatMap(n => list(n, 2 * n, n * n), list(1, 2, 3)); //=> list(1, 2, 1, 2, 4, 4, 3, 6, 9)"}],"line":1360,"character":0},{"sort":"variable","name":"chain","documentation":"Alias for [`flatMap`](#flatMap).","type":"<A, B>(f: (a: A) => List<B>, l: List<A>) => List<B>","tags":{"category":"Transformers"},"tagsArray":[{"name":"category","text":"Transformers"}],"line":1368,"character":13},{"sort":"function","signatures":[{"type":"<A>(left: List<A>, right: List<A>): List<A>","parameters":[{"name":"left","documentation":"","type":"List<A>","tags":{},"tagsArray":[]},{"name":"right","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Concatenates two lists.","tags":[{"name":"complexity","text":"O(log(n))"},{"name":"category","text":"Transformers"},{"name":"example","text":"concat(list(0, 1, 2), list(3, 4)); //=> list(0, 1, 2, 3, 4)"}]}],"name":"concat","documentation":"Concatenates two lists.","type":"<A>(left: List<A>, right: List<A>) => List<A>","tags":{"complexity":"O(log(n))","category":"Transformers","example":"concat(list(0, 1, 2), list(3, 4)); //=> list(0, 1, 2, 3, 4)"},"tagsArray":[{"name":"complexity","text":"O(log(n))"},{"name":"category","text":"Transformers"},{"name":"example","text":"concat(list(0, 1, 2), list(3, 4)); //=> list(0, 1, 2, 3, 4)"}],"line":2117,"character":0},{"sort":"function","signatures":[{"type":"<A>(index: number, a: A, l: List<A>): List<A>","parameters":[{"name":"index","documentation":"","type":"number","tags":{},"tagsArray":[]},{"name":"a","documentation":"","type":"A","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Returns a list that has the entry specified by the index replaced with the given value.\n\nIf the index is out of bounds the given list is returned unchanged.","tags":[{"name":"complexity","text":"O(log(n))"},{"name":"category","text":"Transformers"},{"name":"example","text":"update(2, \"X\", list(\"a\", \"b\", \"c\", \"d\", \"e\")); //=> list(\"a\", \"b\", \"X\", \"d\", \"e\")"}]}],"name":"update","documentation":"Returns a list that has the entry specified by the index replaced with the given value.\n\nIf the index is out of bounds the given list is returned unchanged.","type":"<A>(index: number, a: A, l: List<A>) => List<A>","tags":{"complexity":"O(log(n))","category":"Transformers","example":"update(2, \"X\", list(\"a\", \"b\", \"c\", \"d\", \"e\")); //=> list(\"a\", \"b\", \"X\", \"d\", \"e\")"},"tagsArray":[{"name":"complexity","text":"O(log(n))"},{"name":"category","text":"Transformers"},{"name":"example","text":"update(2, \"X\", list(\"a\", \"b\", \"c\", \"d\", \"e\")); //=> list(\"a\", \"b\", \"X\", \"d\", \"e\")"}],"line":2178,"character":0},{"sort":"function","signatures":[{"type":"<A>(index: number, f: (a: A) => A, l: List<A>): List<A>","parameters":[{"name":"index","documentation":"","type":"number","tags":{},"tagsArray":[]},{"name":"f","documentation":"","type":"(a: A) => A","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Returns a list that has the entry specified by the index replaced with\nthe value returned by applying the function to the value.\n\nIf the index is out of bounds the given list is\nreturned unchanged.","tags":[{"name":"complexity","text":"`O(log(n))`"},{"name":"category","text":"Transformers"},{"name":"example","text":"adjust(2, inc, list(0, 1, 2, 3, 4, 5)); //=> list(0, 1, 3, 3, 4, 5)"}]}],"name":"adjust","documentation":"Returns a list that has the entry specified by the index replaced with\nthe value returned by applying the function to the value.\n\nIf the index is out of bounds the given list is\nreturned unchanged.","type":"<A>(index: number, f: (a: A) => A, l: List<A>) => List<A>","tags":{"complexity":"`O(log(n))`","category":"Transformers","example":"adjust(2, inc, list(0, 1, 2, 3, 4, 5)); //=> list(0, 1, 3, 3, 4, 5)"},"tagsArray":[{"name":"complexity","text":"`O(log(n))`"},{"name":"category","text":"Transformers"},{"name":"example","text":"adjust(2, inc, list(0, 1, 2, 3, 4, 5)); //=> list(0, 1, 3, 3, 4, 5)"}],"line":2217,"character":0},{"sort":"function","signatures":[{"type":"<A>(from: number, to: number, l: List<A>): List<A>","parameters":[{"name":"from","documentation":"","type":"number","tags":{},"tagsArray":[]},{"name":"to","documentation":"","type":"number","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Returns a slice of a list. Elements are removed from the beginning and\nend. Both the indices can be negative in which case they will count\nfrom the right end of the list.","tags":[{"name":"complexity","text":"*: `O(log(n))`"},{"name":"category","text":"Transformers"},{"name":"example","text":"*\nconst l = list(0, 1, 2, 3, 4, 5);\nslice(1, 4, l); //=> list(1, 2, 3)\nslice(2, -2, l); //=> list(2, 3)"}]}],"name":"slice","documentation":"Returns a slice of a list. Elements are removed from the beginning and\nend. Both the indices can be negative in which case they will count\nfrom the right end of the list.","type":"<A>(from: number, to: number, l: List<A>) => List<A>","tags":{"complexity":"*: `O(log(n))`","category":"Transformers","example":"*\nconst l = list(0, 1, 2, 3, 4, 5);\nslice(1, 4, l); //=> list(1, 2, 3)\nslice(2, -2, l); //=> list(2, 3)"},"tagsArray":[{"name":"complexity","text":"*: `O(log(n))`"},{"name":"category","text":"Transformers"},{"name":"example","text":"*\nconst l = list(0, 1, 2, 3, 4, 5);\nslice(1, 4, l); //=> list(1, 2, 3)\nslice(2, -2, l); //=> list(2, 3)"}],"line":2479,"character":0},{"sort":"function","signatures":[{"type":"<A>(n: number, l: List<A>): List<A>","parameters":[{"name":"n","documentation":"","type":"number","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Takes the first `n` elements from a list and returns them in a new list.","tags":[{"name":"complexity","text":"`O(log(n))`"},{"name":"category","text":"Transformers"},{"name":"example","text":"take(3, list(0, 1, 2, 3, 4, 5)); //=> list(0, 1, 2)"}]}],"name":"take","documentation":"Takes the first `n` elements from a list and returns them in a new list.","type":"<A>(n: number, l: List<A>) => List<A>","tags":{"complexity":"`O(log(n))`","category":"Transformers","example":"take(3, list(0, 1, 2, 3, 4, 5)); //=> list(0, 1, 2)"},"tagsArray":[{"name":"complexity","text":"`O(log(n))`"},{"name":"category","text":"Transformers"},{"name":"example","text":"take(3, list(0, 1, 2, 3, 4, 5)); //=> list(0, 1, 2)"}],"line":2601,"character":0},{"sort":"function","signatures":[{"type":"<A>(predicate: (a: A) => boolean, l: List<A>): List<A>","parameters":[{"name":"predicate","documentation":"","type":"(a: A) => boolean","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Takes the first elements in the list for which the predicate returns\n`true`.","tags":[{"name":"complexity","text":"`O(k + log(n))` where `k` is the number of elements satisfying\nthe predicate."},{"name":"category","text":"Transformers"},{"name":"example","text":"takeWhile(n => n < 4, list(0, 1, 2, 3, 4, 5, 6)); //=> list(0, 1, 2, 3)\ntakeWhile(_ => false, list(0, 1, 2, 3, 4, 5)); //=> list()"}]}],"name":"takeWhile","documentation":"Takes the first elements in the list for which the predicate returns\n`true`.","type":"<A>(predicate: (a: A) => boolean, l: List<A>) => List<A>","tags":{"complexity":"`O(k + log(n))` where `k` is the number of elements satisfying\nthe predicate.","category":"Transformers","example":"takeWhile(n => n < 4, list(0, 1, 2, 3, 4, 5, 6)); //=> list(0, 1, 2, 3)\ntakeWhile(_ => false, list(0, 1, 2, 3, 4, 5)); //=> list()"},"tagsArray":[{"name":"complexity","text":"`O(k + log(n))` where `k` is the number of elements satisfying\nthe predicate."},{"name":"category","text":"Transformers"},{"name":"example","text":"takeWhile(n => n < 4, list(0, 1, 2, 3, 4, 5, 6)); //=> list(0, 1, 2, 3)\ntakeWhile(_ => false, list(0, 1, 2, 3, 4, 5)); //=> list()"}],"line":2630,"character":0},{"sort":"function","signatures":[{"type":"<A>(predicate: (a: A) => boolean, l: List<A>): List<A>","parameters":[{"name":"predicate","documentation":"","type":"(a: A) => boolean","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Takes the last elements in the list for which the predicate returns\n`true`.","tags":[{"name":"complexity","text":"`O(k + log(n))` where `k` is the number of elements\nsatisfying the predicate."},{"name":"category","text":"Transformers"},{"name":"example","text":"takeLastWhile(n => n > 2, list(0, 1, 2, 3, 4, 5)); //=> list(3, 4, 5)\ntakeLastWhile(_ => false, list(0, 1, 2, 3, 4, 5)); //=> list()"}]}],"name":"takeLastWhile","documentation":"Takes the last elements in the list for which the predicate returns\n`true`.","type":"<A>(predicate: (a: A) => boolean, l: List<A>) => List<A>","tags":{"complexity":"`O(k + log(n))` where `k` is the number of elements\nsatisfying the predicate.","category":"Transformers","example":"takeLastWhile(n => n > 2, list(0, 1, 2, 3, 4, 5)); //=> list(3, 4, 5)\ntakeLastWhile(_ => false, list(0, 1, 2, 3, 4, 5)); //=> list()"},"tagsArray":[{"name":"complexity","text":"`O(k + log(n))` where `k` is the number of elements\nsatisfying the predicate."},{"name":"category","text":"Transformers"},{"name":"example","text":"takeLastWhile(n => n > 2, list(0, 1, 2, 3, 4, 5)); //=> list(3, 4, 5)\ntakeLastWhile(_ => false, list(0, 1, 2, 3, 4, 5)); //=> list()"}],"line":2649,"character":0},{"sort":"function","signatures":[{"type":"<A>(predicate: (a: A) => boolean, l: List<A>): List<A>","parameters":[{"name":"predicate","documentation":"","type":"(a: A) => boolean","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Removes the first elements in the list for which the predicate returns\n`true`.","tags":[{"name":"complexity","text":"`O(k + log(n))` where `k` is the number of elements\nsatisfying the predicate."},{"name":"category","text":"Transformers"},{"name":"example","text":"dropWhile(n => n < 4, list(0, 1, 2, 3, 4, 5, 6)); //=> list(4, 5, 6)"}]}],"name":"dropWhile","documentation":"Removes the first elements in the list for which the predicate returns\n`true`.","type":"<A>(predicate: (a: A) => boolean, l: List<A>) => List<A>","tags":{"complexity":"`O(k + log(n))` where `k` is the number of elements\nsatisfying the predicate.","category":"Transformers","example":"dropWhile(n => n < 4, list(0, 1, 2, 3, 4, 5, 6)); //=> list(4, 5, 6)"},"tagsArray":[{"name":"complexity","text":"`O(k + log(n))` where `k` is the number of elements\nsatisfying the predicate."},{"name":"category","text":"Transformers"},{"name":"example","text":"dropWhile(n => n < 4, list(0, 1, 2, 3, 4, 5, 6)); //=> list(4, 5, 6)"}],"line":2667,"character":0},{"sort":"function","signatures":[{"type":"<A>(l: List<A>): List<A>","parameters":[{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Returns a new list without repeated elements.","tags":[{"name":"complexity","text":"`O(n)`"},{"name":"category","text":"Transformers"},{"name":"example","text":"dropRepeats(L.list(0, 0, 1, 1, 1, 2, 3, 3, 4, 4)); //=> list(0, 1, 2, 3, 4)"}]}],"name":"dropRepeats","documentation":"Returns a new list without repeated elements.","type":"<A>(l: List<A>) => List<A>","tags":{"complexity":"`O(n)`","category":"Transformers","example":"dropRepeats(L.list(0, 0, 1, 1, 1, 2, 3, 3, 4, 4)); //=> list(0, 1, 2, 3, 4)"},"tagsArray":[{"name":"complexity","text":"`O(n)`"},{"name":"category","text":"Transformers"},{"name":"example","text":"dropRepeats(L.list(0, 0, 1, 1, 1, 2, 3, 3, 4, 4)); //=> list(0, 1, 2, 3, 4)"}],"line":2683,"character":0},{"sort":"function","signatures":[{"type":"<A>(predicate: (a: A, b: A) => Boolean, l: List<A>): List<A>","parameters":[{"name":"predicate","documentation":"","type":"(a: A, b: A) => Boolean","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Returns a new list without repeated elements by using the given\nfunction to determine when elements are equal.","tags":[{"name":"complexity","text":"`O(n)`"},{"name":"category","text":"Transformers"},{"name":"example","text":"dropRepeatsWith(\n   (n, m) => Math.floor(n) === Math.floor(m),\n   list(0, 0.4, 1.2, 1.1, 1.8, 2.2, 3.8, 3.4, 4.7, 4.2)\n); //=> list(0, 1, 2, 3, 4)"}]}],"name":"dropRepeatsWith","documentation":"Returns a new list without repeated elements by using the given\nfunction to determine when elements are equal.","type":"<A>(predicate: (a: A, b: A) => Boolean, l: List<A>) => List<A>","tags":{"complexity":"`O(n)`","category":"Transformers","example":"dropRepeatsWith(\n   (n, m) => Math.floor(n) === Math.floor(m),\n   list(0, 0.4, 1.2, 1.1, 1.8, 2.2, 3.8, 3.4, 4.7, 4.2)\n); //=> list(0, 1, 2, 3, 4)"},"tagsArray":[{"name":"complexity","text":"`O(n)`"},{"name":"category","text":"Transformers"},{"name":"example","text":"dropRepeatsWith(\n   (n, m) => Math.floor(n) === Math.floor(m),\n   list(0, 0.4, 1.2, 1.1, 1.8, 2.2, 3.8, 3.4, 4.7, 4.2)\n); //=> list(0, 1, 2, 3, 4)"}],"line":2700,"character":0},{"sort":"function","signatures":[{"type":"<A>(n: number, l: List<A>): List<A>","parameters":[{"name":"n","documentation":"","type":"number","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Takes the last `n` elements from a list and returns them in a new\nlist.","tags":[{"name":"complexity","text":"`O(log(n))`"},{"name":"category","text":"Transformers"},{"name":"example","text":"takeLast(3, list(0, 1, 2, 3, 4, 5)); //=> list(3, 4, 5)"}]}],"name":"takeLast","documentation":"Takes the last `n` elements from a list and returns them in a new\nlist.","type":"<A>(n: number, l: List<A>) => List<A>","tags":{"complexity":"`O(log(n))`","category":"Transformers","example":"takeLast(3, list(0, 1, 2, 3, 4, 5)); //=> list(3, 4, 5)"},"tagsArray":[{"name":"complexity","text":"`O(log(n))`"},{"name":"category","text":"Transformers"},{"name":"example","text":"takeLast(3, list(0, 1, 2, 3, 4, 5)); //=> list(3, 4, 5)"}],"line":2721,"character":0},{"sort":"function","signatures":[{"type":"<A>(index: number, l: List<A>): [List<A>, List<A>]","parameters":[{"name":"index","documentation":"","type":"number","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"[List<A>, List<A>]","documentation":"Splits a list at the given index and return the two sides in a pair.\nThe left side will contain all elements before but not including the\nelement at the given index. The right side contains the element at the\nindex and all elements after it.","tags":[{"name":"complexity","text":"`O(log(n))`"},{"name":"category","text":"Transformers"},{"name":"example","text":"const l = list(0, 1, 2, 3, 4, 5, 6, 7, 8);\nsplitAt(4, l); //=> [list(0, 1, 2, 3), list(4, 5, 6, 7, 8)]"}]}],"name":"splitAt","documentation":"Splits a list at the given index and return the two sides in a pair.\nThe left side will contain all elements before but not including the\nelement at the given index. The right side contains the element at the\nindex and all elements after it.","type":"<A>(index: number, l: List<A>) => [List<A>, List<A>]","tags":{"complexity":"`O(log(n))`","category":"Transformers","example":"const l = list(0, 1, 2, 3, 4, 5, 6, 7, 8);\nsplitAt(4, l); //=> [list(0, 1, 2, 3), list(4, 5, 6, 7, 8)]"},"tagsArray":[{"name":"complexity","text":"`O(log(n))`"},{"name":"category","text":"Transformers"},{"name":"example","text":"const l = list(0, 1, 2, 3, 4, 5, 6, 7, 8);\nsplitAt(4, l); //=> [list(0, 1, 2, 3), list(4, 5, 6, 7, 8)]"}],"line":2737,"character":0},{"sort":"function","signatures":[{"type":"<A>(predicate: (a: A) => boolean, l: List<A>): [List<A>, List<A>]","parameters":[{"name":"predicate","documentation":"","type":"(a: A) => boolean","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"[List<A>, List<A>]","documentation":"Splits a list at the first element in the list for which the given\npredicate returns `true`.","tags":[{"name":"complexity","text":"`O(n)`"},{"name":"category","text":"Transformers"},{"name":"example","text":"const l = list(0, 1, 2, 3, 4, 5, 6, 7);\nsplitWhen((n) => n > 3, l); //=> [list(0, 1, 2, 3), list(4, 5, 6, 7)]"}]}],"name":"splitWhen","documentation":"Splits a list at the first element in the list for which the given\npredicate returns `true`.","type":"<A>(predicate: (a: A) => boolean, l: List<A>) => [List<A>, List<A>]","tags":{"complexity":"`O(n)`","category":"Transformers","example":"const l = list(0, 1, 2, 3, 4, 5, 6, 7);\nsplitWhen((n) => n > 3, l); //=> [list(0, 1, 2, 3), list(4, 5, 6, 7)]"},"tagsArray":[{"name":"complexity","text":"`O(n)`"},{"name":"category","text":"Transformers"},{"name":"example","text":"const l = list(0, 1, 2, 3, 4, 5, 6, 7);\nsplitWhen((n) => n > 3, l); //=> [list(0, 1, 2, 3), list(4, 5, 6, 7)]"}],"line":2751,"character":0},{"sort":"function","signatures":[{"type":"<A>(size: number, l: List<A>): List<List<A>>","parameters":[{"name":"size","documentation":"","type":"number","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<List<A>>","documentation":"Splits the list into chunks of the given size.","tags":[{"name":"category","text":"Transformers"},{"name":"example","text":"splitEvery(2, list(0, 1, 2, 3, 4)); //=> list(list(0, 1), list(2, 3), list(4))"}]}],"name":"splitEvery","documentation":"Splits the list into chunks of the given size.","type":"<A>(size: number, l: List<A>) => List<List<A>>","tags":{"category":"Transformers","example":"splitEvery(2, list(0, 1, 2, 3, 4)); //=> list(list(0, 1), list(2, 3), list(4))"},"tagsArray":[{"name":"category","text":"Transformers"},{"name":"example","text":"splitEvery(2, list(0, 1, 2, 3, 4)); //=> list(list(0, 1), list(2, 3), list(4))"}],"line":2766,"character":0},{"sort":"function","signatures":[{"type":"<A>(from: number, amount: number, l: List<A>): List<A>","parameters":[{"name":"from","documentation":"","type":"number","tags":{},"tagsArray":[]},{"name":"amount","documentation":"","type":"number","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Takes an index, a number of elements to remove and a list. Returns a\nnew list with the given amount of elements removed from the specified\nindex.","tags":[{"name":"complexity","text":"`O(log(n))`"},{"name":"category","text":"Transformers"},{"name":"example","text":"const l = list(0, 1, 2, 3, 4, 5, 6, 7, 8);\nremove(4, 3, l); //=> list(0, 1, 2, 3, 7, 8)\nremove(2, 5, l); //=> list(0, 1, 7, 8)"}]}],"name":"remove","documentation":"Takes an index, a number of elements to remove and a list. Returns a\nnew list with the given amount of elements removed from the specified\nindex.","type":"<A>(from: number, amount: number, l: List<A>) => List<A>","tags":{"complexity":"`O(log(n))`","category":"Transformers","example":"const l = list(0, 1, 2, 3, 4, 5, 6, 7, 8);\nremove(4, 3, l); //=> list(0, 1, 2, 3, 7, 8)\nremove(2, 5, l); //=> list(0, 1, 7, 8)"},"tagsArray":[{"name":"complexity","text":"`O(log(n))`"},{"name":"category","text":"Transformers"},{"name":"example","text":"const l = list(0, 1, 2, 3, 4, 5, 6, 7, 8);\nremove(4, 3, l); //=> list(0, 1, 2, 3, 7, 8)\nremove(2, 5, l); //=> list(0, 1, 7, 8)"}],"line":2794,"character":0},{"sort":"function","signatures":[{"type":"<A>(n: number, l: List<A>): List<A>","parameters":[{"name":"n","documentation":"","type":"number","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Returns a new list without the first `n` elements.","tags":[{"name":"complexity","text":"`O(log(n))`"},{"name":"category","text":"Transformers"},{"name":"example","text":"drop(2, list(0, 1, 2, 3, 4, 5)); //=> list(2, 3, 4, 5)"}]}],"name":"drop","documentation":"Returns a new list without the first `n` elements.","type":"<A>(n: number, l: List<A>) => List<A>","tags":{"complexity":"`O(log(n))`","category":"Transformers","example":"drop(2, list(0, 1, 2, 3, 4, 5)); //=> list(2, 3, 4, 5)"},"tagsArray":[{"name":"complexity","text":"`O(log(n))`"},{"name":"category","text":"Transformers"},{"name":"example","text":"drop(2, list(0, 1, 2, 3, 4, 5)); //=> list(2, 3, 4, 5)"}],"line":2806,"character":0},{"sort":"function","signatures":[{"type":"<A>(n: number, l: List<A>): List<A>","parameters":[{"name":"n","documentation":"","type":"number","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Returns a new list without the last `n` elements.","tags":[{"name":"complexity","text":"`O(log(n))`"},{"name":"category","text":"Transformers"},{"name":"example","text":"dropLast(2, list(0, 1, 2, 3, 4, 5)); //=> list(0, 1, 2, 3)"}]}],"name":"dropLast","documentation":"Returns a new list without the last `n` elements.","type":"<A>(n: number, l: List<A>) => List<A>","tags":{"complexity":"`O(log(n))`","category":"Transformers","example":"dropLast(2, list(0, 1, 2, 3, 4, 5)); //=> list(0, 1, 2, 3)"},"tagsArray":[{"name":"complexity","text":"`O(log(n))`"},{"name":"category","text":"Transformers"},{"name":"example","text":"dropLast(2, list(0, 1, 2, 3, 4, 5)); //=> list(0, 1, 2, 3)"}],"line":2818,"character":0},{"sort":"function","signatures":[{"type":"<A>(l: List<A>): List<A>","parameters":[{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Returns a new list with the last element removed. If the list is\nempty the empty list is returned.","tags":[{"name":"complexity","text":"`O(1)`"},{"name":"category","text":"Transformers"},{"name":"example","text":"pop(list(0, 1, 2, 3)); //=> list(0, 1, 2)"}]}],"name":"pop","documentation":"Returns a new list with the last element removed. If the list is\nempty the empty list is returned.","type":"<A>(l: List<A>) => List<A>","tags":{"complexity":"`O(1)`","category":"Transformers","example":"pop(list(0, 1, 2, 3)); //=> list(0, 1, 2)"},"tagsArray":[{"name":"complexity","text":"`O(1)`"},{"name":"category","text":"Transformers"},{"name":"example","text":"pop(list(0, 1, 2, 3)); //=> list(0, 1, 2)"}],"line":2831,"character":0},{"sort":"variable","name":"init","documentation":"Alias for [`pop`](#pop).","type":"<A>(l: List<A>) => List<A>","tags":{"category":"Transformers"},"tagsArray":[{"name":"category","text":"Transformers"}],"line":2840,"character":13},{"sort":"function","signatures":[{"type":"<A>(l: List<A>): List<A>","parameters":[{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Returns a new list with the first element removed. If the list is\nempty the empty list is returned.","tags":[{"name":"complexity","text":"`O(1)`"},{"name":"category","text":"Transformers"},{"name":"example","text":"tail(list(0, 1, 2, 3)); //=> list(1, 2, 3)\ntail(empty()); //=> list()"}]}],"name":"tail","documentation":"Returns a new list with the first element removed. If the list is\nempty the empty list is returned.","type":"<A>(l: List<A>) => List<A>","tags":{"complexity":"`O(1)`","category":"Transformers","example":"tail(list(0, 1, 2, 3)); //=> list(1, 2, 3)\ntail(empty()); //=> list()"},"tagsArray":[{"name":"complexity","text":"`O(1)`"},{"name":"category","text":"Transformers"},{"name":"example","text":"tail(list(0, 1, 2, 3)); //=> list(1, 2, 3)\ntail(empty()); //=> list()"}],"line":2852,"character":0},{"sort":"function","signatures":[{"type":"<A>(index: number, element: A, l: List<A>): List<A>","parameters":[{"name":"index","documentation":"","type":"number","tags":{},"tagsArray":[]},{"name":"element","documentation":"","type":"A","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Inserts the given element at the given index in the list.","tags":[{"name":"complexity","text":"O(log(n))"},{"name":"category","text":"Transformers"},{"name":"example","text":"insert(2, \"c\", list(\"a\", \"b\", \"d\", \"e\")); //=> list(\"a\", \"b\", \"c\", \"d\", \"e\")"}]}],"name":"insert","documentation":"Inserts the given element at the given index in the list.","type":"<A>(index: number, element: A, l: List<A>) => List<A>","tags":{"complexity":"O(log(n))","category":"Transformers","example":"insert(2, \"c\", list(\"a\", \"b\", \"d\", \"e\")); //=> list(\"a\", \"b\", \"c\", \"d\", \"e\")"},"tagsArray":[{"name":"complexity","text":"O(log(n))"},{"name":"category","text":"Transformers"},{"name":"example","text":"insert(2, \"c\", list(\"a\", \"b\", \"d\", \"e\")); //=> list(\"a\", \"b\", \"c\", \"d\", \"e\")"}],"line":2881,"character":0},{"sort":"function","signatures":[{"type":"<A>(index: number, elements: List<A>, l: List<A>): List<A>","parameters":[{"name":"index","documentation":"","type":"number","tags":{},"tagsArray":[]},{"name":"elements","documentation":"","type":"List<A>","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Inserts the given list of elements at the given index in the list.","tags":[{"name":"complexity","text":"`O(log(n))`"},{"name":"category","text":"Transformers"},{"name":"example","text":"insertAll(2, list(\"c\", \"d\"), list(\"a\", \"b\", \"e\", \"f\")); //=> list(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")"}]}],"name":"insertAll","documentation":"Inserts the given list of elements at the given index in the list.","type":"<A>(index: number, elements: List<A>, l: List<A>) => List<A>","tags":{"complexity":"`O(log(n))`","category":"Transformers","example":"insertAll(2, list(\"c\", \"d\"), list(\"a\", \"b\", \"e\", \"f\")); //=> list(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")"},"tagsArray":[{"name":"complexity","text":"`O(log(n))`"},{"name":"category","text":"Transformers"},{"name":"example","text":"insertAll(2, list(\"c\", \"d\"), list(\"a\", \"b\", \"e\", \"f\")); //=> list(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")"}],"line":2893,"character":0},{"sort":"function","signatures":[{"type":"<A>(l: List<A>): List<A>","parameters":[{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Reverses a list.","tags":[{"name":"category","text":"Transformers"},{"name":"complexity","text":"O(n)"},{"name":"example","text":"reverse(list(0, 1, 2, 3, 4, 5)); //=> list(5, 4, 3, 2, 1, 0)"}]}],"name":"reverse","documentation":"Reverses a list.","type":"<A>(l: List<A>) => List<A>","tags":{"category":"Transformers","complexity":"O(n)","example":"reverse(list(0, 1, 2, 3, 4, 5)); //=> list(5, 4, 3, 2, 1, 0)"},"tagsArray":[{"name":"category","text":"Transformers"},{"name":"complexity","text":"O(n)"},{"name":"example","text":"reverse(list(0, 1, 2, 3, 4, 5)); //=> list(5, 4, 3, 2, 1, 0)"}],"line":2911,"character":0},{"sort":"function","signatures":[{"type":"<A, B>(as: List<A>, bs: List<B>): List<[A, B]>","parameters":[{"name":"as","documentation":"","type":"List<A>","tags":{},"tagsArray":[]},{"name":"bs","documentation":"","type":"List<B>","tags":{},"tagsArray":[]}],"returnType":"List<[A, B]>","documentation":"Iterate over two lists in parallel and collect the pairs.","tags":[{"name":"complexity","text":"`O(log(n))`, where `n` is the length of the smallest\nlist."},{"name":"category","text":"Transformers"},{"name":"example","text":"const names = list(\"a\", \"b\", \"c\", \"d\", \"e\");\nconst years = list(0, 1, 2, 3, 4, 5, 6);\n//=> list([\"a\", 0], [\"b\", 1], [\"c\", 2], [\"d\", 3], [\"e\", 4]);"}]}],"name":"zip","documentation":"Iterate over two lists in parallel and collect the pairs.","type":"<A, B>(as: List<A>, bs: List<B>) => List<[A, B]>","tags":{"complexity":"`O(log(n))`, where `n` is the length of the smallest\nlist.","category":"Transformers","example":"const names = list(\"a\", \"b\", \"c\", \"d\", \"e\");\nconst years = list(0, 1, 2, 3, 4, 5, 6);\n//=> list([\"a\", 0], [\"b\", 1], [\"c\", 2], [\"d\", 3], [\"e\", 4]);"},"tagsArray":[{"name":"complexity","text":"`O(log(n))`, where `n` is the length of the smallest\nlist."},{"name":"category","text":"Transformers"},{"name":"example","text":"const names = list(\"a\", \"b\", \"c\", \"d\", \"e\");\nconst years = list(0, 1, 2, 3, 4, 5, 6);\n//=> list([\"a\", 0], [\"b\", 1], [\"c\", 2], [\"d\", 3], [\"e\", 4]);"}],"line":2943,"character":0},{"sort":"function","signatures":[{"type":"<A, B, C>(f: (a: A, b: B) => C, as: List<A>, bs: List<B>): List<C>","parameters":[{"name":"f","documentation":"","type":"(a: A, b: B) => C","tags":{},"tagsArray":[]},{"name":"as","documentation":"","type":"List<A>","tags":{},"tagsArray":[]},{"name":"bs","documentation":"","type":"List<B>","tags":{},"tagsArray":[]}],"returnType":"List<C>","documentation":"This is like mapping over two lists at the same time. The two lists\nare iterated over in parallel and each pair of elements is passed\nto the function. The returned values are assembled into a new list.\n\nThe shortest list determines the size of the result.","tags":[{"name":"complexity","text":"`O(log(n))` where `n` is the length of the smallest\nlist."},{"name":"category","text":"Transformers"},{"name":"example","text":"const names = list(\"Turing\", \"Curry\");\nconst years = list(1912, 1900);\nzipWith((name, year) => ({ name, year }), names, years);\n//=> list({ name: \"Turing\", year: 1912 }, { name: \"Curry\", year: 1900 });"}]}],"name":"zipWith","documentation":"This is like mapping over two lists at the same time. The two lists\nare iterated over in parallel and each pair of elements is passed\nto the function. The returned values are assembled into a new list.\n\nThe shortest list determines the size of the result.","type":"<A, B, C>(f: (a: A, b: B) => C, as: List<A>, bs: List<B>) => List<C>","tags":{"complexity":"`O(log(n))` where `n` is the length of the smallest\nlist.","category":"Transformers","example":"const names = list(\"Turing\", \"Curry\");\nconst years = list(1912, 1900);\nzipWith((name, year) => ({ name, year }), names, years);\n//=> list({ name: \"Turing\", year: 1912 }, { name: \"Curry\", year: 1900 });"},"tagsArray":[{"name":"complexity","text":"`O(log(n))` where `n` is the length of the smallest\nlist."},{"name":"category","text":"Transformers"},{"name":"example","text":"const names = list(\"Turing\", \"Curry\");\nconst years = list(1912, 1900);\nzipWith((name, year) => ({ name, year }), names, years);\n//=> list({ name: \"Turing\", year: 1912 }, { name: \"Curry\", year: 1900 });"}],"line":2963,"character":0},{"sort":"function","signatures":[{"type":"<A extends Comparable>(l: List<A>): List<A>","parameters":[{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Sorts the given list. The list should contain values that can be\ncompared using the `<` operator or values that implement the\nFantasy Land [Ord](https://github.com/fantasyland/fantasy-land#ord)\nspecification.\n\nPerforms a stable sort.","tags":[{"name":"complexity","text":"O(n * log(n))"},{"name":"category","text":"Transformers"},{"name":"example","text":"sort(list(5, 3, 1, 8, 2)); //=> list(1, 2, 3, 5, 8)\nsort(list(\"e\", \"a\", \"c\", \"b\", \"d\"); //=> list(\"a\", \"b\", \"c\", \"d\", \"e\")"}]}],"name":"sort","documentation":"Sorts the given list. The list should contain values that can be\ncompared using the `<` operator or values that implement the\nFantasy Land [Ord](https://github.com/fantasyland/fantasy-land#ord)\nspecification.\n\nPerforms a stable sort.","type":"<A extends Comparable>(l: List<A>) => List<A>","tags":{"complexity":"O(n * log(n))","category":"Transformers","example":"sort(list(5, 3, 1, 8, 2)); //=> list(1, 2, 3, 5, 8)\nsort(list(\"e\", \"a\", \"c\", \"b\", \"d\"); //=> list(\"a\", \"b\", \"c\", \"d\", \"e\")"},"tagsArray":[{"name":"complexity","text":"O(n * log(n))"},{"name":"category","text":"Transformers"},{"name":"example","text":"sort(list(5, 3, 1, 8, 2)); //=> list(1, 2, 3, 5, 8)\nsort(list(\"e\", \"a\", \"c\", \"b\", \"d\"); //=> list(\"a\", \"b\", \"c\", \"d\", \"e\")"}],"line":3015,"character":0},{"sort":"function","signatures":[{"type":"<A>(comparator: (a: A, b: A) => Ordering, l: List<A>): List<A>","parameters":[{"name":"comparator","documentation":"","type":"(a: A, b: A) => Ordering","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Sort the given list by comparing values using the given function.\nThe function receieves two values and should return `-1` if the\nfirst value is stricty larger than the second, `0` is they are\nequal and `1` if the first values is strictly smaller than the\nsecond.\n\nNote that the comparison function is equivalent to the one required\nby\n[`Array.prototype.sort`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).\n\nPerforms a stable sort.","tags":[{"name":"complexity","text":"O(n * log(n))"},{"name":"category","text":"Transformers"},{"name":"example","text":"sortWith((a, b) => {\n   if (a === b) {\n     return 0;\n   } else if (a < b) {\n     return -1;\n   } else {\n     return 1;\n   }\n}, list(5, 3, 1, 8, 2)); //=> list(1, 2, 3, 5, 8)"}]}],"name":"sortWith","documentation":"Sort the given list by comparing values using the given function.\nThe function receieves two values and should return `-1` if the\nfirst value is stricty larger than the second, `0` is they are\nequal and `1` if the first values is strictly smaller than the\nsecond.\n\nNote that the comparison function is equivalent to the one required\nby\n[`Array.prototype.sort`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).\n\nPerforms a stable sort.","type":"<A>(comparator: (a: A, b: A) => Ordering, l: List<A>) => List<A>","tags":{"complexity":"O(n * log(n))","category":"Transformers","example":"sortWith((a, b) => {\n   if (a === b) {\n     return 0;\n   } else if (a < b) {\n     return -1;\n   } else {\n     return 1;\n   }\n}, list(5, 3, 1, 8, 2)); //=> list(1, 2, 3, 5, 8)"},"tagsArray":[{"name":"complexity","text":"O(n * log(n))"},{"name":"category","text":"Transformers"},{"name":"example","text":"sortWith((a, b) => {\n   if (a === b) {\n     return 0;\n   } else if (a < b) {\n     return -1;\n   } else {\n     return 1;\n   }\n}, list(5, 3, 1, 8, 2)); //=> list(1, 2, 3, 5, 8)"}],"line":3052,"character":0},{"sort":"function","signatures":[{"type":"<A, B extends Comparable>(f: (a: A) => B, l: List<A>): List<A>","parameters":[{"name":"f","documentation":"","type":"(a: A) => B","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Sort the given list by passing each value through the function and\ncomparing the resulting value. The function should either return\nvalues comparable using `<` or values that implement the Fantasy\nLand [Ord](https://github.com/fantasyland/fantasy-land#ord)\nspecification.\n\nPerforms a stable sort.","tags":[{"name":"complexity","text":"O(n * log(n))"},{"name":"category","text":"Transformers"},{"name":"example","text":"sortBy(\n   o => o.n,\n   list({ n: 4, m: \"foo\" }, { n: 3, m: \"bar\" }, { n: 1, m: \"baz\" })\n); //=> list({ n: 1, m: \"baz\" }, { n: 3, m: \"bar\" }, { n: 4, m: \"foo\" })\n\nsortBy(s => s.length, list(\"foo\", \"bar\", \"ba\", \"aa\", \"list\", \"z\"));\n//=> list(\"z\", \"ba\", \"aa\", \"foo\", \"bar\", \"list\")"}]}],"name":"sortBy","documentation":"Sort the given list by passing each value through the function and\ncomparing the resulting value. The function should either return\nvalues comparable using `<` or values that implement the Fantasy\nLand [Ord](https://github.com/fantasyland/fantasy-land#ord)\nspecification.\n\nPerforms a stable sort.","type":"<A, B extends Comparable>(f: (a: A) => B, l: List<A>) => List<A>","tags":{"complexity":"O(n * log(n))","category":"Transformers","example":"sortBy(\n   o => o.n,\n   list({ n: 4, m: \"foo\" }, { n: 3, m: \"bar\" }, { n: 1, m: \"baz\" })\n); //=> list({ n: 1, m: \"baz\" }, { n: 3, m: \"bar\" }, { n: 4, m: \"foo\" })\n\nsortBy(s => s.length, list(\"foo\", \"bar\", \"ba\", \"aa\", \"list\", \"z\"));\n//=> list(\"z\", \"ba\", \"aa\", \"foo\", \"bar\", \"list\")"},"tagsArray":[{"name":"complexity","text":"O(n * log(n))"},{"name":"category","text":"Transformers"},{"name":"example","text":"sortBy(\n   o => o.n,\n   list({ n: 4, m: \"foo\" }, { n: 3, m: \"bar\" }, { n: 1, m: \"baz\" })\n); //=> list({ n: 1, m: \"baz\" }, { n: 3, m: \"bar\" }, { n: 4, m: \"foo\" })\n\nsortBy(s => s.length, list(\"foo\", \"bar\", \"ba\", \"aa\", \"list\", \"z\"));\n//=> list(\"z\", \"ba\", \"aa\", \"foo\", \"bar\", \"list\")"}],"line":3091,"character":0},{"sort":"function","signatures":[{"type":"<A>(l: List<A>): List<List<A>>","parameters":[{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<List<A>>","documentation":"Returns a list of lists where each sublist's elements are all\nequal.","tags":[{"name":"category","text":"Transformers"},{"name":"example","text":"group(list(0, 0, 1, 2, 2, 2, 3, 3)); //=> list(list(0, 0), list(1), list(2, 2, 2), list(3, 3))"}]}],"name":"group","documentation":"Returns a list of lists where each sublist's elements are all\nequal.","type":"<A>(l: List<A>) => List<List<A>>","tags":{"category":"Transformers","example":"group(list(0, 0, 1, 2, 2, 2, 3, 3)); //=> list(list(0, 0), list(1), list(2, 2, 2), list(3, 3))"},"tagsArray":[{"name":"category","text":"Transformers"},{"name":"example","text":"group(list(0, 0, 1, 2, 2, 2, 3, 3)); //=> list(list(0, 0), list(1), list(2, 2, 2), list(3, 3))"}],"line":3123,"character":0},{"sort":"function","signatures":[{"type":"<A>(f: (a: A, b: A) => boolean, l: List<A>): List<List<A>>","parameters":[{"name":"f","documentation":"","type":"(a: A, b: A) => boolean","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<List<A>>","documentation":"Returns a list of lists where each sublist's elements are pairwise\nequal based on the given comparison function.\n\nNote that only adjacent elements are compared for equality. If all\nequal elements should be grouped together the list should be sorted\nbefore grouping.","tags":[{"name":"category","text":"Transformers"},{"name":"example","text":"const floorEqual = (a, b) => Math.round(a) === Math.round(b);\ngroupWith(floorEqual, list(1.1, 1.3, 1.8, 2, 2.2, 3.3, 3.4));\n//=> list(list(1.1, 1.3), list(1.8, 2, 2.2), list(3.3, 3.4))\n\nconst sameLength = (a, b) => a.length === b.length;\ngroupWith(sameLength, list(\"foo\", \"bar\", \"ab\", \"bc\", \"baz\"));\n//=> list(list(\"foo\", \"bar\"), list(\"ab\", \"bc\"), list(\"baz))"}]}],"name":"groupWith","documentation":"Returns a list of lists where each sublist's elements are pairwise\nequal based on the given comparison function.\n\nNote that only adjacent elements are compared for equality. If all\nequal elements should be grouped together the list should be sorted\nbefore grouping.","type":"<A>(f: (a: A, b: A) => boolean, l: List<A>) => List<List<A>>","tags":{"category":"Transformers","example":"const floorEqual = (a, b) => Math.round(a) === Math.round(b);\ngroupWith(floorEqual, list(1.1, 1.3, 1.8, 2, 2.2, 3.3, 3.4));\n//=> list(list(1.1, 1.3), list(1.8, 2, 2.2), list(3.3, 3.4))\n\nconst sameLength = (a, b) => a.length === b.length;\ngroupWith(sameLength, list(\"foo\", \"bar\", \"ab\", \"bc\", \"baz\"));\n//=> list(list(\"foo\", \"bar\"), list(\"ab\", \"bc\"), list(\"baz))"},"tagsArray":[{"name":"category","text":"Transformers"},{"name":"example","text":"const floorEqual = (a, b) => Math.round(a) === Math.round(b);\ngroupWith(floorEqual, list(1.1, 1.3, 1.8, 2, 2.2, 3.3, 3.4));\n//=> list(list(1.1, 1.3), list(1.8, 2, 2.2), list(3.3, 3.4))\n\nconst sameLength = (a, b) => a.length === b.length;\ngroupWith(sameLength, list(\"foo\", \"bar\", \"ab\", \"bc\", \"baz\"));\n//=> list(list(\"foo\", \"bar\"), list(\"ab\", \"bc\"), list(\"baz))"}],"line":3145,"character":0},{"sort":"function","signatures":[{"type":"<A>(separator: A, l: List<A>): List<A>","parameters":[{"name":"separator","documentation":"","type":"A","tags":{},"tagsArray":[]},{"name":"l","documentation":"","type":"List<A>","tags":{},"tagsArray":[]}],"returnType":"List<A>","documentation":"Inserts a separator between each element in a list.","tags":[{"name":"category","text":"Transformers"},{"name":"example","text":"intersperse(\"n\", list(\"ba\", \"a\", \"a\")); //=> list(\"ba\", \"n\", \"a\", \"n\", \"a\")"}]}],"name":"intersperse","documentation":"Inserts a separator between each element in a list.","type":"<A>(separator: A, l: List<A>) => List<A>","tags":{"category":"Transformers","example":"intersperse(\"n\", list(\"ba\", \"a\", \"a\")); //=> list(\"ba\", \"n\", \"a\", \"n\", \"a\")"},"tagsArray":[{"name":"category","text":"Transformers"},{"name":"example","text":"intersperse(\"n\", list(\"ba\", \"a\", \"a\")); //=> list(\"ba\", \"n\", \"a\", \"n\", \"a\")"}],"line":3168,"character":0}]}]}